datasource DS {
  // optionally set multiple providers
  // example: provider = ["sqlite", "postgresql"]
  provider = "postgresql"
  url = "***"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["connectOrCreate"]
}

enum DocumentType {
  ARTICLE
  TWEET
}

model Entry {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  uid          String       @unique
  documentType DocumentType @default(TWEET)
  document     Json
  tweet        Tweet?
  article      Article?
}

model Article {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  publishedAt       DateTime          @default(now())
  entry             Entry             @relation(fields: [entryId], references: [id])
  entryId           String            @unique
  author            String
  siteName          String?
  title             String
  description       String?
  articleText       String?
  language          String?
  sentiment         Float             @default(0)
  tagLabels         String[]
  url               String            @unique
  articleContext    ArticleContext?
  tags              Tag[]
  tweets            Tweet[]
  articleCategories ArticleCategory[]
  summaries         ArticleSummary[]
  ArticlePriority   ArticlePriority[]
}

model ArticleCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  uid       String
  label     String
}

model ArticleContext {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  content   Json
}

model ArticlePriority {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  article              Article               @relation(fields: [articleId], references: [id])
  articleId            String
  uid                  String
  label                String
  articlePriorityTerms ArticlePriorityTerm[]
}

model ArticlePriorityTerm {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  articlePriority   ArticlePriority? @relation(fields: [articlePriorityId], references: [id])
  articlePriorityId String?
  uid               String
  label             String
}

model ArticleSummary {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  article          Article  @relation(fields: [articleId], references: [id])
  articleId        String
  sentenceText     String
  sentenceScore    Float    @default(0)
  sentencePosition Int      @default(0)
}

enum StreamSource {
  FEEDLY
}

enum StreamType {
  CATEGORY
  BOARD
  PRIORITY
}

model EntryStream {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  lastAccessedAt   DateTime?
  streamSource     StreamSource @default(FEEDLY)
  streamType       StreamType   @default(CATEGORY)
  name             String       @unique
  description      String?
  streamIdentifier String       @unique
  continuation     String?
}

model Tag {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  documentType DocumentType @default(TWEET)
  article      Article?     @relation(fields: [articleId], references: [id])
  articleId    String?
  tweet        Tweet?       @relation(fields: [tweetId], references: [id])
  tweetId      String?
  label        String
  uri          String
  diffbotUris  String[]
  dbpediaUris  String[]
  rdfTypes     String[]
  entityTypes  String[]
  mentions     Int          @default(0)
  confidence   Float        @default(0)
  salience     Float        @default(0)
  sentiment    Float        @default(0)
  hasLocation  Boolean      @default(false)
  latitude     Float?
  longitude    Float?
  precision    Float?
}

model Tweet {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  publishedAt     DateTime
  entry           Entry           @relation(fields: [entryId], references: [id])
  entryId         String          @unique
  author          String
  title           String
  content         String
  url             String          @unique
  sentiment       Float           @default(0)
  tweetContext    TweetContext?
  tweetCategories TweetCategory[]
  tweetPriorities TweetPriority[]
  tags            Tag[]
  articles        Article[]
}

model TweetCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  uid       String
  label     String
}

model TweetContext {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  content   Json
}

model TweetPriority {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  tweet              Tweet               @relation(fields: [tweetId], references: [id])
  tweetId            String
  uid                String
  label              String
  tweetPriorityTerms TweetPriorityTerm[]
}

model TweetPriorityTerm {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  tweetPriority   TweetPriority? @relation(fields: [tweetPriorityId], references: [id])
  tweetPriorityId String?
  uid             String
  label           String
}
