datasource DS {
  // optionally set multiple providers
  // example: provider = ["sqlite", "postgresql"]
  provider = "postgresql"
  url = "***"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["connectOrCreate"]
}

enum DocumentType {
  ARTICLE
  TWEET
}

model Entry {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  uid           String       @unique
  documentType  DocumentType @default(TWEET)
  document      Json
  tweet         Tweet?
  article       Article?
  entryStream   EntryStream? @relation(fields: [entryStreamId], references: [id])
  entryStreamId String?
}

model Article {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  publishedAt    DateTime        @default(now())
  entry          Entry           @relation(fields: [entryId], references: [id])
  entryId        String          @unique
  author         String
  siteName       String?
  title          String
  description    String?
  articleText    String?
  language       String?
  sentiment      Float           @default(0)
  tagLabels      String[]
  url            String          @unique
  articleContext ArticleContext?
  articleTags    ArticleTag[]
}

model ArticleContext {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  content   Json
}

model ArticleTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
  label     String
  uri       String
  count     Int      @default(0)
  score     Float    @default(0)
  rdfTypes  String[]
  sentiment Float    @default(0)
}

enum StreamSource {
  FEEDLY
}

enum StreamType {
  CATEGORY
  BOARD
  PRIORITY
}

model EntryStream {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  lastAccessedAt   DateTime?
  streamSource     StreamSource @default(FEEDLY)
  streamType       StreamType   @default(CATEGORY)
  name             String
  description      String?
  streamIdentifier String
  continuation     String?
  entries          Entry[]
}

model Tweet {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  publishedAt     DateTime
  entry           Entry           @relation(fields: [entryId], references: [id])
  entryId         String          @unique
  author          String
  title           String
  content         String
  url             String          @unique
  sentiment       Float           @default(0)
  tweetContext    TweetContext?
  tweetCategories TweetCategory[]
  tweetPriorities TweetPriority[]
}

model TweetCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  uid       String
  label     String
}

model TweetContext {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  content   Json
}

model TweetPriority {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  tweet              Tweet               @relation(fields: [tweetId], references: [id])
  tweetId            String
  uid                String
  label              String
  tweetPriorityTerms TweetPriorityTerm[]
}

model TweetPriorityTerm {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  tweetPriority   TweetPriority? @relation(fields: [tweetPriorityId], references: [id])
  tweetPriorityId String?
  uid             String
  label           String
}
